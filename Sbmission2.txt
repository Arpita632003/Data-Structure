#Discuss string slicing and provide examples
Slicing is the process of accessing a sub-sequence of a sequence by specifying a starting and ending index.
In Python, you perform slicing using the colon : operator. 
example
my_list = ['apple', 'banana', 'cherry', 'date']
print(my_list[1:3]) # output: ['banana', 'cherry']

#Explain the key features of lists in Python
Ordered: They contain elements or items that are sequentially arranged according to their specific insertion order.
Mutable: They support in-place mutations or changes to their contained elements.
Sliceable: They support slicing operations, meaning that you can extract a series of elements from them.
Combinable: They support concatenation operations, so you can combine two or more lists using the concatenation operators.

# Describe how to access, modify, and delete elements in a list with examples
Access-You can access individual items from a list using the item’s associated index. 
Example-
>>> languages = ["Python", "Java", "JavaScript", "C++", "Go", "Rust"]
>>> languages[0]
'Python'
Modify-Python lists are mutable data types. 
This means that you can change their elements without changing the identity of the underlying list.
Example->>> numbers = [1, 2, 3, 4]
>>> numbers[0] = "one"
>>> numbers
['one', 2, 3, 4]
Delete-1)remove(item)	Removes the first occurrence of item from the list. It raises a ValueError if there’s no such item.
2)pop([index])	Removes the item at index and returns it back to the caller. If you don’t provide a target index,
then .pop() removes and returns the last item in the list.
Note that the square brackets around index mean that the argument is optional. The brackets aren’t part of the syntax.
3)clear()	Removes all items from the list.
example-
>>> sample = [12, 11, 10, 42, 14, 12, 42]

>>> sample.remove(42)
>>> sample
[12, 11, 10, 14, 12, 42]

# Compare and contrast tuples and lists with examples
1)Lists and Tuples store one or more objects or values in a specific order. 
The objects stored in a list or tuple can be of any type including the nothing type defined by the None Keyword.
Lists and Tuples are similar in most context.
2)Lists has more builtin function than that of tuple.
We can use dir([object]) inbuilt function to get all the associated functions for list and tuple.
3)List has mutable nature and tuples has imutable nature
4)List has more functionality than the tuple.

# Describe the key features of sets and provide examples of their use
Sets are unordered collections with no duplicate elements.
Membership testing: Sets are used to check if an element is present in the set or not.
Removing duplicate entries: Sets automatically eliminate duplicate elements.
Mathematical operations: Sets can perform operations like union, intersection, difference, and symmetric difference.
1)sets are mutable data structures that contain unique, immutable, unordered elements.
we start with an empty set and sequentially put new elements in it using the .add() method:

S = set()  
 S.add(10)
S.add(3.0)
S.add("Hello")
 print(S)
# output:
# {10, 3.0, "Hello"}
2)Set union is used to combine elements from two sets
A = {1, 2, 3}
B = {2, 4, 6, 1}
 result = A | B
 
print(result)
# output:
# {1, 2, 3, 4, 6}
2)Set intersection is used to find the elements common to both sets
result = A & B

# Discuss the use cases of tuples and sets in Python programming
1)list1=[1,2,3,"Brinjal","Brinjal","Apple","Apple"]
list1
>>>[1, 2, 3, 'Brinjal', 'Brinjal', 'Apple', 'Apple']
Set=set(list1)
Set
>>>{1, 2, 3, 'Apple', 'Brinjal'}
2)s[0]#unorderd collection
3)s={1,2,3,{2,3}}#unhashable >>set inside set must be immutable

